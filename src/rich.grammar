@top Document { (expression space)* }

expression { Text | Entity | MismatchedCloseTag | incompleteStartCloseTag }

Entity {
    OpenTag expression* (CloseTag | MissingCloseTag)
}

OpenTag[closedBy="CloseTag MissingCloseTag"] {
    StartTag space* TagName space* (Attribute space*)? EndTag
}

CloseTag[openedBy=OpenTag] {
    StartCloseTag space* TagName space* EndTag
}

MismatchedCloseTag {
    mismatchedStartCloseTag space* TagName space* EndTag
}

Attribute {
    Is space* AttributeValue
}
    
AttributeValue {
    unquotedValue | ("\"" chars* "\"")
}

@context entityContext from "./tokens.js"

@external tokens startTag from "./tokens.js" {
    StartTag[closedBy="EndTag"]
    StartCloseTag
    MissingCloseTag
    mismatchedStartCloseTag[@name=StartCloseTag]
    incompleteStartCloseTag[@name=StartCloseTag]
}

@tokens {
    EndTag[openedBy="StartTag StartCloseTag"] { ">" }

    nameStart {
        ":" | std.asciiLetter | "_" |
        $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
        $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
    }
    nameChar {
        nameStart | "-" | "." | std.digit | $[\u00B7\u0300-\u036F\u203F-\u2040]
    }
    relaxedChar {
        nameChar | "#"
    }

    identifier { nameStart nameChar* }
    unquotedValue { relaxedChar+ }
    TagName { identifier }
    Is { "=" }
    Text { ![<]+ }
    chars { ![\"] }
    space { (" " | "\t" | "\r" | "\n")+ }
}

@detectDelim